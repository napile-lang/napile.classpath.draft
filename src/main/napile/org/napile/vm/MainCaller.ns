package org.napile.vm

import napile.reflect.ReflectUtil
import napile.logging.Logger
import napile.reflect.Method

/**
 * @author VISTALL
 */
util class MainCaller
{
	meth main(val arg : Array<String>)
	{
		if(arg.length == 0)
			throw VmStartupError("Class name - expected")

		val clazz = ReflectUtil.findClass(arg[0])
		val mainMethod = clazz.findStaticMethod("main")
		if(mainMethod == null)
			throw VmStartupError("'static meth main(val arg : Array<String>)' method expected")

		val thread = Thread{
			{
				try
				{
					mainMethod!!.invokeStatic(ArrayUtil.copyOfRange(arg, 1, arg.length))
				}
				catch (val e : Exception)
				{
					e.printStackTrace()
				}
				null
			}
		}

		thread.start()
	}
}