package napile.lang

import napile.condition.CompareResult

/**
 * @author VISTALL
 */
class Int
{
	final static var MAX_VALUE : Int = 0x7fffffff

	local this()

	meth rangeTo(value : Int) : Array<Int>
	{
		var array = Array<Int>(value - this - 1)

		var index = 0
		var me = this
		while (index != array.length)
			array[index ++] = me ++

		return array
	}

	native meth inc() : Int

	native meth dec() : Int

	native meth plus(value : Int) : Int

	native meth times(value : Int) : Int

	native meth minus(value : Int) : Int

	native meth mod(value : Int) : Int

	native meth div(value : Int) : Int

	native meth compareTo(value : Int) : CompareResult

	override native meth equals(o : Any?) : Bool

	override native meth toString() : String
}