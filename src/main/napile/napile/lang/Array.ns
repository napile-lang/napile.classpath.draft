package napile.lang

import napile.collection.Iterator
import napile.collection.Iterable
import napile.reflect.Type

/**
 * @author VISTALL
 */
final class Array<E> : Iterable<E>
{
	val length : Int

	this(length)
	{
		init()

		//val defaultValue : E = typeOf(E).defaultValue
		//var i = 0
		//while(i < length)
		//	set(i++, defaultValue)
	}

	native meth init()

	native meth set(val index : Int, val value : E) : this

	native meth get(val index : Int) : E

	override meth iterator() : Iterator<E> = ArrayIterator<E>(this)

	override meth clone() : this
	{
		var newArray = Array<E>(length)
		var i = 0
		for(it in this)
			newArray[i++] = it
		return newArray
	}
}