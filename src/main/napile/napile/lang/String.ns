package napile.lang

import napile.io.Console

/**
 * @author VISTALL
 */
final class String
{
	local val array : Array<Char>
	local val count : Int
	local val offset : Int

	this(val oldArray : Array<Char>)
	{
		count = oldArray.length
		offset = 0
		array = oldArray.clone()
	}

	this(val oldArray : Array<Char>, offset, count)
	{
		array = ArrayUtil.copyOfRange(oldArray, offset, offset + count);
	}

	meth toArray() : Array<Char> = ArrayUtil.copyOfRange(array, offset, offset + count)

	meth plus(val a : Any) : String
	{
		var c = StringBuilder();
		c += toString()
		c += a
		return c.toString()
	}

	override meth equals(val o : Any?) : Bool
	{
		if (fullyEquals(o))
			return true

		if (o is String)
		{
			var n = count;
			if (n == o.count)
			{
				var v1 = array
				var v2 = o.array
				var i = offset
				var j = o.offset
				while (n-- != 0)
				{
					if (v1[i++] != v2[j++])
						return false
				}

				return true
			}
		}
		return false
	}

	override meth toString() : String = String(array, offset, count)
}