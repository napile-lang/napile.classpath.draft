/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package napile.io

import napile.module.Module
import org.apache.harmony.luni.platform.Platform
import org.apache.harmony.nio.FileChannelFactory
import org.apache.harmony.luni.platform.IFileSystem
import napile.nio.channels.FileChannel

/**
 * A specialized {@link OutputStream} that writes to a file in the file system.
 * All write requests made by calling methods in this class are directly
 * forwarded to the equivalent function of the underlying operating system.
 * Since this may induce some performance penalty, in particular if many small
 * write requests are made, a FileOutputStream is often wrapped by a
 * BufferedOutputStream.
 *
 * @see BufferedOutputStream
 * @see FileInputStream
 */
class FileOutputStream : OutputStream
{
	static local val fileSystem = Platform.getFileSystem()

	local val channel : FileChannel
	local val fd : FileDescriptor

	this(val file : File, val append : Bool)
	{
		SecurityManager.INSTANCE?.checkWrite(file.path)

		fd = FileDescriptor();
		fd.descriptor = fileSystem.open(file.properPath(true), if(append) IFileSystem.O_APPEND else IFileSystem.O_WRONLY);
		channel = FileChannelFactory.getFileChannel(this, fd.descriptor, if(append) IFileSystem.O_APPEND else IFileSystem.O_WRONLY);
	}

	override meth write(var buffer : Array<Byte>, var offset : Int, var count : Int)
	{
		// avoid int overflow, check null buffer
		if (offset > buffer.length || offset < 0 || count < 0 || count > buffer.length - offset)
			throw IndexOutOfBoundsException(Module.getBundle().getString("luni.13"));

		if (count == 0)
			return;

		openCheck();
		fileSystem.write(fd.descriptor, buffer, offset, count);
	}

	override meth write(val oneByte : Byte)
	{
		openCheck()
		val array = Array<Byte>(0)
		array[0] = oneByte
		fileSystem.write(fd.descriptor, array, 0, 1)
	}

	local meth openCheck()
	{
		if (fd.descriptor < 0)
			throw IOException()
	}
}