package napile.reflect

import napile.reflect.Class
import napile.io.Console
import napile.annotation.Immutable

/**
 * @author VISTALL
 */
final class Class<E> : Member
{
	lazy val variables : Array<Variable> = getVariables()

	lazy val constructors : Array<Constructor> = getConstructors()

	lazy val methods : Array<Method> = getMethods()

	lazy val macros : Array<Macro> = getMacros()

	local this(val owner : Class<Any>?, val name : String) : Member(owner, name)

	local meth getVariables() : Array<Variable>
	{
		throw Exception("unsupported")
	}

	local native meth getMacros() : Array<Macro>

	local native meth getMethods() : Array<Method>

	local native meth getConstructors() : Array<Constructor>
}